          <DialogContent className="max-w-6xl w-[90vw] max-h-[90vh] overflow-y-auto p-0">
            {/* Cabeçalho no estilo RD Station */}
            <div className="bg-white border-b border-gray-200">
              <div className="px-6 py-4 flex justify-between items-center">
                <div className="flex items-center">
                  <div className="h-10 w-10 rounded-full bg-blue-100 text-blue-800 flex items-center justify-center mr-3">
                    <i className="fas fa-user text-lg"></i>
                  </div>
                  <div>
                    <h2 className="text-xl font-semibold">{lead.name}</h2>
                    <div className="flex items-center mt-1">
                      <span className="text-sm text-gray-500 mr-2">
                        <i className="fas fa-tag text-gray-400 mr-1"></i>
                        {lead.interestType === 'purchase' ? 'Compra' : lead.interestType === 'rent' ? 'Aluguel' : lead.interestType || 'Interesse'}
                      </span>
                      <span className="text-sm text-gray-500">
                        <i className="fas fa-clock text-gray-400 mr-1"></i>
                        {new Date(lead.createdAt || Date.now()).toLocaleDateString('pt-BR')}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Button variant="outline" size="sm" className="h-9">
                    <i className="fas fa-pencil-alt mr-1 text-gray-500"></i>
                    Editar
                  </Button>
                  <Button variant="outline" size="sm" className="h-9" onClick={() => {
                    setLeadToDelete(lead);
                    setIsDeleteConfirmOpen(true);
                  }}>
                    <i className="fas fa-trash-alt mr-1 text-red-500"></i>
                    Excluir
                  </Button>
                  <DialogClose className="h-9 w-9 p-0 flex items-center justify-center rounded-full text-gray-500 hover:bg-gray-100">
                    <X className="h-4 w-4" />
                  </DialogClose>
                </div>
              </div>
              
              {/* Etapas do funil no estilo RD Station */}
              {sortedStages.length > 0 && (
                <div className="flex w-full border-t border-gray-200">
                  {sortedStages.map((stage, index) => {
                    const isActive = lead.stageId === stage.id || (!lead.stageId && index === 0);
                    const isCompleted = sortedStages.findIndex(s => s.id === lead.stageId) > index;
                    
                    // Definir estilos baseados no estado
                    let bgColor = "bg-gray-100";
                    let textColor = "text-gray-600";
                    let borderColor = "border-gray-100";
                    
                    if (isActive) {
                      bgColor = "bg-blue-50";
                      textColor = "text-blue-700";
                      borderColor = "border-blue-500";
                    } else if (isCompleted) {
                      bgColor = "bg-green-50";
                      textColor = "text-green-700";
                      borderColor = "border-green-500";
                    }
                    
                    return (
                      <div
                        key={stage.id}
                        className={`flex-1 py-3 px-1 ${bgColor} ${textColor} cursor-pointer relative transition-all duration-200 hover:bg-opacity-80`}
                        onClick={() => {
                          apiRequest(`/api/leads/${lead.id}/stage`, {
                            method: "PATCH",
                            body: JSON.stringify({ stageId: stage.id }),
                          })
                            .then(() => {
                              queryClient.invalidateQueries({ queryKey: ['/api/leads'] });
                              toast({
                                title: "Estágio atualizado",
                                description: "O estágio do lead foi atualizado com sucesso.",
                              });
                            })
                            .catch((error) => {
                              console.error("Erro ao atualizar estágio:", error);
                              toast({
                                title: "Erro ao atualizar estágio",
                                description: "Não foi possível atualizar o estágio.",
                                variant: "destructive",
                              });
                            });
                        }}
                      >
                        <div className="flex flex-col items-center justify-center">
                          {isActive && (
                            <div className={`h-1 absolute top-0 left-0 right-0 ${borderColor}`}></div>
                          )}
                          {isCompleted ? (
                            <div className="mb-1 text-green-500">
                              <i className="fas fa-check-circle"></i>
                            </div>
                          ) : isActive ? (
                            <div className="mb-1 text-blue-500">
                              <i className="fas fa-circle text-[8px]"></i>
                            </div>
                          ) : (
                            <div className="mb-1 text-gray-300">
                              <i className="far fa-circle text-[8px]"></i>
                            </div>
                          )}
                          <div className="text-center text-xs font-medium">
                            {stage.name}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
            
            <div className="p-6 bg-gray-50">
              <div className="grid grid-cols-12 gap-6">
                {/* Coluna esquerda */}
                <div className="col-span-8">
                  {/* Card de informações principais */}
                  <div className="bg-white rounded-md shadow-sm mb-6">
                    <div className="border-b border-gray-200 px-4 py-3">
                      <h3 className="text-base font-medium text-gray-800">Informações do Lead</h3>
                    </div>
                    <div className="p-4">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Nome</label>
                            <div className="text-sm">{lead.name}</div>
                          </div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Email</label>
                            <div className="text-sm">{lead.email || "Não informado"}</div>
                          </div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Telefone</label>
                            <div className="text-sm">{lead.phone || "Não informado"}</div>
                          </div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">WhatsApp</label>
                            <div className="text-sm">{(lead as any).whatsapp || "Não informado"}</div>
                          </div>
                        </div>
                        <div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Tipo de Negócio</label>
                            <div className="text-sm">
                              {lead.interestType === 'purchase' ? 'Compra' :
                              lead.interestType === 'rent' ? 'Aluguel' :
                              lead.interestType || 'Não informado'}
                            </div>
                          </div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Tipo de Imóvel</label>
                            <div className="text-sm">
                              {(lead as any).propertyType === 'apartment' ? 'Apartamento' : 
                              (lead as any).propertyType === 'house' ? 'Casa' : 
                              (lead as any).propertyType === 'commercial' ? 'Comercial' : 
                              'Não informado'}
                            </div>
                          </div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Região</label>
                            <div className="text-sm">{(lead as any).region || "Não informado"}</div>
                          </div>
                          <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-600 mb-1">Faixa de Preço</label>
                            <div className="text-sm">
                              {(lead as any).priceRangeMin && (lead as any).priceRangeMax ? 
                                `R$ ${(lead as any).priceRangeMin.toLocaleString('pt-BR')} - R$ ${(lead as any).priceRangeMax.toLocaleString('pt-BR')}` : 
                                lead.budget ? 'R$ ' + lead.budget.toLocaleString('pt-BR') : 'Não informado'}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Card de notas */}
                  <div className="bg-white rounded-md shadow-sm">
                    <div className="border-b border-gray-200 px-4 py-3">
                      <h3 className="text-base font-medium text-gray-800">Anotações</h3>
                    </div>
                    <div className="p-4">
                      <Textarea 
                        placeholder="Digite uma anotação sobre este lead..." 
                        className="resize-none min-h-[120px] text-sm" 
                        defaultValue={lead.notes || ""}
                      />
                      <div className="flex justify-end mt-3">
                        <Button className="bg-blue-600 hover:bg-blue-700 text-sm">
                          Salvar Nota
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Coluna direita */}
                <div className="col-span-4">
                  {/* Card de detalhes adicionais */}
                  <div className="bg-white rounded-md shadow-sm mb-6">
                    <div className="border-b border-gray-200 px-4 py-3">
                      <h3 className="text-base font-medium text-gray-800">Detalhes Adicionais</h3>
                    </div>
                    <div className="p-4">
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-600 mb-1">Origem</label>
                        <div className="text-sm">
                          {lead.source === 'manual' ? 'Manual' :
                          lead.source === 'website' ? 'Website' :
                          lead.source === 'whatsapp' ? 'WhatsApp' :
                          lead.source === 'instagram' ? 'Instagram' :
                          lead.source === 'facebook' ? 'Facebook' :
                          lead.source === 'indicacao' ? 'Indicação' :
                          lead.source || 'Não informado'}
                        </div>
                      </div>
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-600 mb-1">Data de Criação</label>
                        <div className="text-sm">
                          {new Date(lead.createdAt || Date.now()).toLocaleDateString('pt-BR', { 
                            day: '2-digit', 
                            month: '2-digit', 
                            year: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Card de funil de vendas */}
                  <div className="bg-white rounded-md shadow-sm mb-6">
                    <div className="border-b border-gray-200 px-4 py-3">
                      <h3 className="text-base font-medium text-gray-800">Funil de Vendas</h3>
                    </div>
                    <div className="p-4">
                      <label className="block text-sm font-medium text-gray-600 mb-2">
                        Selecionar Funil
                      </label>
                      <Select
                        value={String(lead.funnelId || (funnels?.find(f => f.isDefault)?.id || funnels?.[0]?.id || ""))}
                        onValueChange={(value) => {
                          const funnelId = Number(value);
                          
                          apiRequest(`/api/leads/${lead.id}/funnel`, {
                            method: "PATCH",
                            body: JSON.stringify({ funnelId }),
                          })
                            .then(() => {
                              setCurrentLeadFunnelId(funnelId);
                              queryClient.invalidateQueries({ queryKey: ['/api/leads'] });
                              queryClient.invalidateQueries({ queryKey: ['/api/funnel-stages', funnelId] });
                              
                              toast({
                                title: "Funil atualizado",
                                description: "O funil de vendas foi atualizado com sucesso.",
                              });
                            })
                            .catch((error) => {
                              console.error("Erro ao atualizar funil:", error);
                              toast({
                                title: "Erro ao atualizar funil",
                                description: "Não foi possível atualizar o funil. Tente novamente.",
                                variant: "destructive",
                              });
                            });
                        }}
                      >
                        <SelectTrigger className="w-full">
                          <SelectValue placeholder="Selecione um funil" />
                        </SelectTrigger>
                        <SelectContent>
                          {funnels?.map((funnel) => (
                            <SelectItem key={funnel.id} value={String(funnel.id)}>
                              {funnel.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  {/* Card de ações */}
                  <div className="bg-white rounded-md shadow-sm">
                    <div className="border-b border-gray-200 px-4 py-3">
                      <h3 className="text-base font-medium text-gray-800">Ações</h3>
                    </div>
                    <div className="p-4">
                      <div className="space-y-2">
                        <Button variant="outline" className="w-full justify-start text-gray-700 border-gray-300 h-10">
                          <i className="fas fa-phone-alt mr-2 text-gray-500"></i> Registrar Ligação
                        </Button>
                        <Button variant="outline" className="w-full justify-start text-gray-700 border-gray-300 h-10">
                          <i className="far fa-calendar-alt mr-2 text-gray-500"></i> Agendar Visita
                        </Button>
                        <Button variant="outline" className="w-full justify-start text-gray-700 border-gray-300 h-10">
                          <i className="fas fa-file-alt mr-2 text-gray-500"></i> Criar Proposta
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>