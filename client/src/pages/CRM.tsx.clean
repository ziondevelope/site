import React, { useState, useEffect, useMemo } from "react";
import { User, Filter } from "lucide-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { InsertLead, Lead, FunnelStage, SalesFunnel, insertLeadSchema } from "@shared/schema";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import LeadDetailsDialog from "@/components/crm/LeadDetailsDialog";

const leadFormSchema = insertLeadSchema.extend({
  name: z.string().min(2, "Nome deve ter pelo menos 2 caracteres"),
  phone: z.string().optional().nullable(),
  whatsapp: z.string().optional().nullable(),
  email: z.string().email("Email inválido").optional().nullable(),
  interestType: z.enum(["purchase", "rent", "sale"]).optional().nullable(),
  propertyType: z.enum(["apartment", "house", "commercial"]).optional().nullable(),
  region: z.string().optional().nullable(),
  budget: z.number().optional().nullable(),
  stage: z.enum(["new", "contacted", "visit", "proposal"]).default("new"),
  quickNote: z.string().optional().nullable(),
});

type LeadFormValues = z.infer<typeof leadFormSchema>;

export default function CRM() {
  const [isAddLeadOpen, setIsAddLeadOpen] = useState(false);
  const [leadToDelete, setLeadToDelete] = useState<Lead | null>(null);
  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);
  const [selectedFunnelId, setSelectedFunnelId] = useState<number | null>(null);
  const [selectedStageId, setSelectedStageId] = useState<number | null>(null);
  const [openLeadId, setOpenLeadId] = useState<number | null>(null);
  const [savedNotes, setSavedNotes] = useState<{[leadId: number]: Array<{text: string, date: Date}>}>({});
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Função para abrir o modal de adicionar novo lead
  const handleAddClick = () => {
    form.reset();
    setIsAddLeadOpen(true);
  };
  
  // Fetch all leads at once to avoid Firestore index issues
  const { data: allLeads, isLoading: leadsLoading } = useQuery<Lead[]>({
    queryKey: ['/api/leads'],
    queryFn: () => apiRequest(`/api/leads`),
  });
  
  // Fetch all sales funnels
  const { data: funnels, isLoading: funnelsLoading } = useQuery<SalesFunnel[]>({
    queryKey: ['/api/sales-funnels'],
  });
  
  // Estado para armazenar o ID do funil selecionado para um lead específico quando a modal abrir
  const [currentLeadFunnelId, setCurrentLeadFunnelId] = useState<number | null>(null);
  
  // Fetch funnel stages when a funnel is selected
  const { data: stages, isLoading: stagesLoading } = useQuery<FunnelStage[]>({
    queryKey: ['/api/funnel-stages', selectedFunnelId || currentLeadFunnelId],
    queryFn: async () => {
      // Se não tiver funil selecionado mas tiver funis disponíveis, usar o padrão ou o primeiro
      let funnelIdToUse = selectedFunnelId || currentLeadFunnelId;
      
      if (!funnelIdToUse && funnels && funnels.length > 0) {
        const defaultFunnel = funnels.find(f => f.isDefault) || funnels[0];
        funnelIdToUse = defaultFunnel.id;
        
        // Atualizar o estado para manter a consistência
        if (selectedFunnelId === null) {
          setSelectedFunnelId(funnelIdToUse);
        }
      }
      
      if (!funnelIdToUse) throw new Error("Nenhum funil selecionado");
      return apiRequest(`/api/funnel-stages?funnelId=${funnelIdToUse}`);
    },
    enabled: (selectedFunnelId !== null || currentLeadFunnelId !== null || (funnels && funnels.length > 0)),
  });
  
  // Set default funnel when data is loaded
  useEffect(() => {
    if (funnels && funnels.length > 0 && !selectedFunnelId) {
      const defaultFunnel = funnels.find(f => f.isDefault) || funnels[0];
      setSelectedFunnelId(defaultFunnel.id);
    }
  }, [funnels, selectedFunnelId]);
  
  // Garantir que todos os leads tenham um funil associado
  useEffect(() => {
    if (allLeads && funnels && funnels.length > 0) {
      const leadsWithoutFunnel = allLeads.filter(lead => !lead.funnelId);
      
      if (leadsWithoutFunnel.length > 0) {
        // Encontrar o funil padrão ou usar o primeiro da lista
        const defaultFunnel = funnels.find(f => f.isDefault) || funnels[0];
        
        // Atualizar cada lead sem funil para usar o funil padrão
        leadsWithoutFunnel.forEach(lead => {
          apiRequest(`/api/leads/${lead.id}/funnel`, {
            method: "PATCH",
            body: JSON.stringify({ funnelId: defaultFunnel.id }),
          })
            .then(() => {
              queryClient.invalidateQueries({ queryKey: ['/api/leads'] });
            })
            .catch(error => {
              console.error("Erro ao atribuir funil padrão:", error);
            });
        });
      }
    }
  }, [allLeads, funnels, queryClient]);
  
  // Filter leads by status on the client side (for backward compatibility)
  const newLeads = allLeads?.filter(lead => lead.status === 'new') || [];
  const contactedLeads = allLeads?.filter(lead => lead.status === 'contacted') || [];
  const visitLeads = allLeads?.filter(lead => lead.status === 'visit') || [];
  const proposalLeads = allLeads?.filter(lead => lead.status === 'proposal') || [];
  
  // Filter leads by funnel and stage if selected
  const filteredLeads = useMemo(() => {
    if (!allLeads) return [];
    
    if (selectedFunnelId && selectedStageId) {
      return allLeads.filter(lead => 
        lead.funnelId === selectedFunnelId && 
        lead.stageId === selectedStageId
      );
    }
    
    if (selectedFunnelId) {
      return allLeads.filter(lead => lead.funnelId === selectedFunnelId);
    }
    
    return allLeads;
  }, [allLeads, selectedFunnelId, selectedStageId]);
  
  // Quando um lead é aberto, carregar seus dados de funil
  useEffect(() => {
    if (openLeadId !== null && allLeads) {
      const openLead = allLeads.find(lead => lead.id === openLeadId);
      
      if (openLead && openLead.funnelId) {
        // Se o lead já tem um funil associado, usar esse funil
        setCurrentLeadFunnelId(openLead.funnelId);
      } else if (openLead && funnels && funnels.length > 0) {
        // Se o lead não tem funil, mas existem funis disponíveis,
        // atribuir o funil padrão ou o primeiro funil disponível
        const defaultFunnel = funnels.find(f => f.isDefault) || funnels[0];
        
        // Atualizar o lead no backend
        apiRequest(`/api/leads/${openLead.id}/funnel`, {
          method: "PATCH",
          body: JSON.stringify({ funnelId: defaultFunnel.id }),
        })
          .then(() => {
            // Após atualizar o lead, definir o funil atual
            setCurrentLeadFunnelId(defaultFunnel.id);
            // Recarregar a lista de leads
            queryClient.invalidateQueries({ queryKey: ['/api/leads'] });
          })
          .catch(error => {
            console.error("Erro ao atribuir funil padrão:", error);
          });
      }
    }
  }, [openLeadId, allLeads, funnels, queryClient]);
  
  const isLoading = leadsLoading || funnelsLoading || (selectedFunnelId !== null && stagesLoading);

  const form = useForm<LeadFormValues>({
    resolver: zodResolver(leadFormSchema),
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      whatsapp: "",
      message: "",
      source: "manual",
      interestType: undefined,
      budget: undefined,
      notes: "",
      quickNote: "",
    },
  });
  
  // Mutation para adicionar novo lead
  const addLeadMutation = useMutation({
    mutationFn: (data: LeadFormValues) => {
      return apiRequest('/api/leads', {
        method: 'POST',
        body: JSON.stringify(data)
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });
      setIsAddLeadOpen(false);
      form.reset();
      
      toast({
        title: "Lead adicionado",
        description: "O lead foi adicionado com sucesso!",
      });
    },
    onError: (error) => {
      console.error("Erro ao adicionar lead:", error);
      toast({
        title: "Erro ao adicionar lead",
        description: "Não foi possível adicionar o lead. Verifique os dados e tente novamente.",
        variant: "destructive",
      });
    },
  });
  
  function onSubmit(data: LeadFormValues) {
    addLeadMutation.mutate(data);
  }

  // Mutation para deletar lead
  const deleteLeadMutation = useMutation({
    mutationFn: (leadId: number) => {
      return apiRequest(`/api/leads/${leadId}`, {
        method: 'DELETE'
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });
      setIsDeleteConfirmOpen(false);
      setLeadToDelete(null);
      
      toast({
        title: "Lead excluído",
        description: "O lead foi excluído com sucesso!",
      });
    },
    onError: (error) => {
      console.error("Erro ao excluir lead:", error);
      toast({
        title: "Erro ao excluir lead",
        description: "Não foi possível excluir o lead. Tente novamente.",
        variant: "destructive",
      });
    },
  });
  
  return (
    <div className="container mx-auto p-4">
      {/* Header */}
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-bold">Gestão de Leads - CRM</h1>
        <Button onClick={handleAddClick} className="bg-blue-600 hover:bg-blue-700">
          Adicionar Lead
        </Button>
      </div>
      
      {/* Filter options */}
      <div className="bg-white p-4 mb-6 rounded-lg shadow">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div className="flex items-center gap-2 text-gray-600">
            <Filter className="h-4 w-4" />
            <span className="font-medium">Filtrar leads por:</span>
          </div>
          
          <div className="flex flex-col md:flex-row gap-4">
            <Select
              value={selectedFunnelId?.toString() || ""}
              onValueChange={(value) => {
                setSelectedFunnelId(Number(value));
                setSelectedStageId(null);
              }}
            >
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Selecionar funil" />
              </SelectTrigger>
              <SelectContent>
                {funnels?.map((funnel) => (
                  <SelectItem key={funnel.id} value={funnel.id.toString()}>
                    {funnel.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            <Select
              value={selectedStageId?.toString() || ""}
              onValueChange={(value) => setSelectedStageId(Number(value))}
              disabled={!selectedFunnelId || !stages || stages.length === 0}
            >
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Selecionar estágio" />
              </SelectTrigger>
              <SelectContent>
                {stages?.filter(stage => stage.funnelId === selectedFunnelId)
                  .sort((a, b) => a.position - b.position)
                  .map((stage) => (
                    <SelectItem key={stage.id} value={stage.id.toString()}>
                      {stage.name}
                    </SelectItem>
                  ))}
              </SelectContent>
            </Select>
            
            {selectedFunnelId && (
              <Button
                variant="outline"
                onClick={() => {
                  setSelectedFunnelId(null);
                  setSelectedStageId(null);
                }}
              >
                Limpar filtros
              </Button>
            )}
          </div>
        </div>
      </div>
      
      {/* Tabela de leads com guias */}
      <div className="bg-white rounded-lg shadow overflow-hidden min-h-[600px]">
        {/* Contagem de resultados */}
        <div className="flex justify-between items-center p-4 border-b">
          <h2 className="text-lg font-semibold">
            Leads{' '}
            {selectedFunnelId && (
              <span className="text-sm font-normal text-gray-500">
                ({filteredLeads.length} resultados)
              </span>
            )}
          </h2>
        </div>
        
        {/* Exibir leads filtrados em formato de cards/lista */}
        <div className="p-4">
          {isLoading ? (
            <div className="flex justify-center items-center h-40">
              <p className="text-gray-500">Carregando leads...</p>
            </div>
          ) : filteredLeads.length === 0 ? (
            <div className="flex justify-center items-center h-40">
              <p className="text-gray-500">Nenhum lead encontrado para os filtros selecionados.</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {filteredLeads.map(lead => (
                <div 
                  key={lead.id} 
                  className="border rounded-lg p-4 hover:shadow-md cursor-pointer transition-shadow"
                  onClick={() => setOpenLeadId(lead.id)}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center text-blue-600">
                        <User className="h-5 w-5" />
                      </div>
                      <div>
                        <h3 className="font-semibold">{lead.name}</h3>
                        <p className="text-sm text-gray-500">{lead.email || 'Email não informado'}</p>
                      </div>
                    </div>
                    <div className="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-800">
                      {lead.status === 'new' ? 'Novo' : 
                       lead.status === 'contacted' ? 'Contatado' : 
                       lead.status === 'visit' ? 'Visita' : 
                       lead.status === 'proposal' ? 'Proposta' : lead.status}
                    </div>
                  </div>
                  
                  <div className="mt-3 pt-3 border-t text-sm">
                    <div className="flex justify-between text-gray-500">
                      <span>Origem: {lead.source === 'manual' ? 'Manual' : 
                               lead.source === 'website' ? 'Website' : 
                               lead.source === 'facebook' ? 'Facebook' : lead.source}</span>
                      <span>{lead.createdAt ? new Date(lead.createdAt).toLocaleDateString('pt-BR') : ''}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Lead Details Dialog */}
      <LeadDetailsDialog 
        open={openLeadId !== null}
        onOpenChange={(open) => {
          if (!open) setOpenLeadId(null);
        }}
        lead={allLeads?.find(l => l.id === openLeadId) || null}
        stages={stages}
        funnels={funnels}
        onDelete={(lead) => {
          setLeadToDelete(lead);
          setIsDeleteConfirmOpen(true);
        }}
      />

      {/* Add Lead Dialog */}
      <Dialog open={isAddLeadOpen} onOpenChange={setIsAddLeadOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogTitle>Adicionar Novo Lead</DialogTitle>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome</FormLabel>
                    <FormControl>
                      <Input placeholder="Nome do Lead" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="Email" {...field} value={field.value || ""} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Telefone</FormLabel>
                    <FormControl>
                      <Input placeholder="Telefone" {...field} value={field.value || ""} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="whatsapp"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>WhatsApp</FormLabel>
                    <FormControl>
                      <Input placeholder="WhatsApp" {...field} value={field.value || ""} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="interestType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Tipo de Interesse</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value as string || undefined}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione..." />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="purchase">Compra</SelectItem>
                          <SelectItem value="rent">Aluguel</SelectItem>
                          <SelectItem value="sale">Venda</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="propertyType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Tipo de Imóvel</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value as string || undefined}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione..." />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="apartment">Apartamento</SelectItem>
                          <SelectItem value="house">Casa</SelectItem>
                          <SelectItem value="commercial">Comercial</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="region"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Região</FormLabel>
                    <FormControl>
                      <Input placeholder="Região de interesse" {...field} value={field.value || ""} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="budget"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Orçamento</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        placeholder="Orçamento disponível" 
                        {...field}
                        value={field.value === null || field.value === undefined ? '' : field.value}
                        onChange={(e) => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="quickNote"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Anotação Rápida</FormLabel>
                    <FormControl>
                      <Textarea 
                        rows={3}
                        placeholder="Adicione uma anotação sobre este lead" 
                        className="resize-none"
                        {...field}
                        value={field.value || ""}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="flex justify-end space-x-2 pt-2">
                <Button type="button" variant="outline" onClick={() => setIsAddLeadOpen(false)}>
                  Cancelar
                </Button>
                <Button 
                  type="submit" 
                  disabled={addLeadMutation.isPending}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {addLeadMutation.isPending ? "Adicionando..." : "Adicionar Lead"}
                </Button>
              </div>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteConfirmOpen} onOpenChange={setIsDeleteConfirmOpen}>
        <DialogContent className="sm:max-w-[400px]">
          <DialogTitle>Confirmar Exclusão</DialogTitle>
          <div className="py-4">
            <p>Tem certeza que deseja excluir o lead <strong>{leadToDelete?.name}</strong>?</p>
            <p className="text-sm text-gray-500 mt-2">Esta ação não pode ser desfeita.</p>
          </div>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setIsDeleteConfirmOpen(false)}>
              Cancelar
            </Button>
            <Button 
              variant="destructive" 
              onClick={() => leadToDelete && deleteLeadMutation.mutate(leadToDelete.id)}
              disabled={deleteLeadMutation.isPending}
            >
              {deleteLeadMutation.isPending ? "Excluindo..." : "Excluir Lead"}
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}